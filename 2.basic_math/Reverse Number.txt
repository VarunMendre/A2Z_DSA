Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:

Input: x = 123
Output: 321

code : 
	
#include <climits>  // For INT_MIN and INT_MAX

class Solution {
public:
    int reverse(int x) {
        long revNum = 0;  // Use long to handle overflow during reversal

        // Loop to reverse the digits of the number
        while(x != 0){
            int ld = x % 10;              // Get the last digit
            revNum = (revNum * 10) + ld;  // Append the last digit to the reversed number
            x = x / 10;                   // Remove the last digit from the original number
        }

        // Check for overflow: if reversed number is outside the range of 32-bit signed int
        if(revNum < INT_MIN || revNum > INT_MAX)
            return 0;  // Return 0 if overflow occurs

        return (int)revNum;  // Safely cast back to int and return
    }
};
