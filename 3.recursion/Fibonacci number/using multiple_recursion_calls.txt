A.Problem Statement:
Given an integer N, print the Nth Fibonacci number (using 0-based indexing).

Examples:

Example 1:
Input:
N = 5
Output:
5
Explanation:
The Fibonacci series up to the 5th term is: 0, 1, 1, 2, 3, 5.
The 5th Fibonacci number is 5.

Example 2:
Input:
N = 6
Output:
8
Explanation:
The Fibonacci series up to the 6th term is: 0, 1, 1, 2, 3, 5, 8.
The 6th Fibonacci number is 8.

B.Approach : 

1.The function F(n) uses recursion to compute the Fibonacci number at position n using the definition:
F(n) = F(n-1) + F(n-2).
2.The base cases are handled: if n <= 1, return n (i.e., F(0) = 0, F(1) = 1).
3.The main function reads the input n and prints the result of F(n), which is the Nth Fibonacci number.
4.This approach has exponential time complexity (O(2^n)) due to overlapping subproblems and no memoization.

C.Solution : 

#include <bits/stdc++.h>
using namespace std;
int F(int n){
  if(n<=1) return n;
  int last = F(n-1);
  int slast = F(n-2);
  return last + slast;
}
int main() 
{
   int n;
   cin>>n;
   
   cout<<F(n);
    return 0;
}

D.Recursion Tree : for n=4

                      F(4)
                     /    \
                 F(3)     F(2)
                /   \     /   \
            F(2)   F(1) F(1) F(0)
           /   \      |     |
       F(1)  F(0)     1     0
         |     |
         1     0


E.Solution from leetcode: 

class Solution {
public:
    int fib(int n) {
        if(n <= 1) return n;

        int last = fib(n-1);
        int slast = fib(n-2);

        return last + slast;
    }
};

⏱️ Time Complexity:
O(2ⁿ) — Exponential time complexity.
📦 Space Complexity: O(n) (due to recursion call stack).